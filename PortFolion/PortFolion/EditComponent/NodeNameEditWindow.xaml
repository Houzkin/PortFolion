<mah:MetroWindow x:Class="PortFolion.Views.NodeNameEditWindow"
                 x:Name="nameEditWindow"
                 xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                 xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                 xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity"
                 xmlns:ei="http://schemas.microsoft.com/expression/2010/interactions"
                 xmlns:l="http://schemas.livet-mvvm.net/2011/wpf"
                 xmlns:v="clr-namespace:PortFolion.Views"
                 xmlns:vm="clr-namespace:PortFolion.ViewModels"
                 xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
                 xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
                 xmlns:mah="clr-namespace:MahApps.Metro.Controls;assembly=MahApps.Metro"
                 mc:Ignorable="d" SaveWindowPosition="true"
                 GlowBrush="{DynamicResource AccentColorBrush}" BorderThickness="1" 
                 FocusManager.FocusedElement="{Binding ElementName=editText}"
                 Title="{Binding Title}" Height="180" Width="400" ResizeMode="NoResize">
    
     <i:Interaction.Triggers>
     
     	<!--Viewに特別な要件が存在しない限りは、トリガーやアクションの自作にこだわらず積極的にコードビハインドを使いましょう -->
    	<!--Viewのコードビハインドは、基本的にView内で完結するロジックとViewModelからのイベントの受信(専用リスナを使用する)に限るとトラブルが少なくなります -->
    	<!--Livet1.1からはコードビハインドでViewModelのイベントを受信するためのWeakEventLisnterサポートが追加されています --> 
        
        <!--WindowのContentRenderedイベントのタイミングでViewModelのInitializeメソッドが呼ばれます-->
        <!--<i:EventTrigger EventName="ContentRendered">
            <l:LivetCallMethodAction MethodTarget="{Binding}" MethodName="Initialize"/>
        </i:EventTrigger>-->

        <!--Windowが閉じたタイミングでViewModelのDisposeメソッドが呼ばれます-->
        <i:EventTrigger EventName="Closed">
            <l:DataContextDisposeAction/>
        </i:EventTrigger>

        <l:InteractionMessageTrigger MessageKey="EditEndNodeName" Messenger="{Binding Messenger}">
            <ei:ChangePropertyAction TargetName="nameEditWindow" PropertyName="DialogResult" Value="true"/>
        </l:InteractionMessageTrigger>

        <!--WindowのCloseキャンセル処理に対応する場合は、WindowCloseCancelBehaviorの使用を検討してください-->

    </i:Interaction.Triggers>
    
    <Grid>
        <StackPanel Orientation="Vertical" Margin="5">
            <TextBlock Text="名前を設定または変更します" FontSize="20" Margin="0,3"/>
            <TextBlock Text="{Binding PresentName,StringFormat=変更前 : {0}}" Margin="0,3"/>
            <TextBox x:Name="editText" Text="{Binding Name, UpdateSourceTrigger=PropertyChanged}" Margin="0,3"/>
            <StackPanel Orientation="Horizontal" HorizontalAlignment="Right" Margin="0,3">
                <Button Content="キャンセル" Command="{Binding CancelCmd}" Margin="3,0"/>
                <Button Content="  OK  " Command="{Binding ExecuteCmd}" Margin="3,0"/>
            </StackPanel>
        </StackPanel>
    </Grid>
</mah:MetroWindow>
