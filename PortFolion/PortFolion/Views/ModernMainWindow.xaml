<Controls:MetroWindow x:Class="PortFolion.Views.ModernMainWindow"
                  xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                  xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                  xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
                  xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
                  xmlns:Controls="clr-namespace:MahApps.Metro.Controls;assembly=MahApps.Metro"
        xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity"
        xmlns:ei="http://schemas.microsoft.com/expression/2010/interactions"
        xmlns:l="http://schemas.livet-mvvm.net/2011/wpf"
        xmlns:v="clr-namespace:PortFolion.Views"
        xmlns:vm="clr-namespace:PortFolion.ViewModels"
                  mc:Ignorable="d" 
                  d:DesignHeight="200" d:DesignWidth="500"
                  TitleCaps="False"
                  Title="PortFolion" >

    <Window.DataContext>
        <vm:MainWindowViewModel/>
    </Window.DataContext>

    <i:Interaction.Triggers>

        <!--Viewに特別な要件が存在しない限りは、トリガーやアクションの自作にこだわらず積極的にコードビハインドを使いましょう 
        Viewのコードビハインドは、基本的にView内で完結するロジックとViewModelからのイベントの受信(専用リスナを使用する)に限るとトラブルが少なくなります 
        Livet1.1からはコードビハインドでViewModelのイベントを受信するためのWeakEventLisnterサポートが追加されています--> 

        <!--WindowのContentRenderedイベントのタイミングでViewModelのInitializeメソッドが呼ばれます-->
        <i:EventTrigger EventName="ContentRendered">
            <l:LivetCallMethodAction MethodTarget="{Binding}" MethodName="Initialize"/>
        </i:EventTrigger>

        <!--Windowが閉じたタイミングでViewModelのDisposeメソッドが呼ばれます-->
        <i:EventTrigger EventName="Closed">
            <l:DataContextDisposeAction/>
        </i:EventTrigger>

        <!--WindowのCloseキャンセル処理に対応する場合は、WindowCloseCancelBehaviorの使用を検討してください-->

    </i:Interaction.Triggers>

    <Grid ShowGridLines="False">
        <Grid.Resources>
                
                
        </Grid.Resources>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto" />
            <RowDefinition Height="*"/>
        </Grid.RowDefinitions>
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="2*" />
            <ColumnDefinition Width="7*" />
        </Grid.ColumnDefinitions>
        <Menu Grid.Row="0" Grid.ColumnSpan="2" ItemsSource="{Binding Menues}">
            <Menu.ItemTemplate>
                <HierarchicalDataTemplate ItemsSource="{Binding Children}">
                    <TextBlock Text="{Binding Header}"/>
                </HierarchicalDataTemplate>
                
            </Menu.ItemTemplate>
            <!--<MenuItem Header="ファイル(_F)" />
            <MenuItem Header="編集(_E)" />
            <MenuItem Header="オプション(_O)">
                <MenuItem IsCheckable="True" Header="オプション1" />
                <MenuItem IsCheckable="True" Header="オプション2" />
                <MenuItem IsCheckable="True" Header="オプション3" />
            </MenuItem>-->
        </Menu>
        <GridSplitter 
        Grid.Row="1" Grid.Column="1" 
        HorizontalAlignment="Left" VerticalAlignment="Stretch" Width="4" >
            <GridSplitter.Background>
                <SolidColorBrush Color="#FFF0F0F0" Opacity="0.495"/>
            </GridSplitter.Background>
        </GridSplitter>
    </Grid>
</Controls:MetroWindow>
